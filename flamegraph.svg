<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="167132526"><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2,179,615 samples, 1.30%)</title><rect x="0.0000%" y="773" width="1.3041%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2179615"/><text x="0.2500%" y="783.50"></text></g><g><title>seahash::stream::SeaHasher::push_bytes (2,179,615 samples, 1.30%)</title><rect x="0.0000%" y="757" width="1.3041%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2179615"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,179,615 samples, 1.30%)</title><rect x="0.0000%" y="741" width="1.3041%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2179615"/><text x="0.2500%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,179,615 samples, 1.30%)</title><rect x="0.0000%" y="725" width="1.3041%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2179615"/><text x="0.2500%" y="735.50"></text></g><g><title>[[heap]] (4,423,078 samples, 2.65%)</title><rect x="0.0000%" y="789" width="2.6464%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4423078"/><text x="0.2500%" y="799.50">[[..</text></g><g><title>brad_solve::ty::Term::is_subtype_heuristic (2,243,463 samples, 1.34%)</title><rect x="1.3041%" y="773" width="1.3423%" height="15" fill="rgb(232,128,0)" fg:x="2179615" fg:w="2243463"/><text x="1.5541%" y="783.50"></text></g><g><title>brad_solve::ty::Term::is_subtype_heuristic (6,656,646 samples, 3.98%)</title><rect x="2.6464%" y="773" width="3.9829%" height="15" fill="rgb(207,160,47)" fg:x="4423078" fg:w="6656646"/><text x="2.8964%" y="783.50">brad..</text></g><g><title>brad_solve::ty::tag::Tags::is_subset (6,656,646 samples, 3.98%)</title><rect x="2.6464%" y="757" width="3.9829%" height="15" fill="rgb(228,23,34)" fg:x="4423078" fg:w="6656646"/><text x="2.8964%" y="767.50">brad..</text></g><g><title>brad_solve::ty::tag::Tags::len (6,656,646 samples, 3.98%)</title><rect x="2.6464%" y="741" width="3.9829%" height="15" fill="rgb(218,30,26)" fg:x="4423078" fg:w="6656646"/><text x="2.8964%" y="751.50">brad..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6,656,646 samples, 3.98%)</title><rect x="2.6464%" y="725" width="3.9829%" height="15" fill="rgb(220,122,19)" fg:x="4423078" fg:w="6656646"/><text x="2.8964%" y="735.50">allo..</text></g><g><title>brad_solve::ty::Type::simplify_heuristic (2,241,023 samples, 1.34%)</title><rect x="6.6293%" y="773" width="1.3409%" height="15" fill="rgb(250,228,42)" fg:x="11079724" fg:w="2241023"/><text x="6.8793%" y="783.50"></text></g><g><title>brad_solve::ty::Conjunct::is_subtype_heuristic (2,241,023 samples, 1.34%)</title><rect x="6.6293%" y="757" width="1.3409%" height="15" fill="rgb(240,193,28)" fg:x="11079724" fg:w="2241023"/><text x="6.8793%" y="767.50"></text></g><g><title>[unknown] (11,123,302 samples, 6.66%)</title><rect x="2.6464%" y="789" width="6.6554%" height="15" fill="rgb(216,20,37)" fg:x="4423078" fg:w="11123302"/><text x="2.8964%" y="799.50">[unknown]</text></g><g><title>cfree@GLIBC_2.2.5 (2,225,633 samples, 1.33%)</title><rect x="7.9702%" y="773" width="1.3317%" height="15" fill="rgb(206,188,39)" fg:x="13320747" fg:w="2225633"/><text x="8.2202%" y="783.50"></text></g><g><title>__libc_start_call_main (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="789" width="1.2151%" height="15" fill="rgb(217,207,13)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="799.50"></text></g><g><title>main (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="773" width="1.2151%" height="15" fill="rgb(231,73,38)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="783.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="757" width="1.2151%" height="15" fill="rgb(225,20,46)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="741" width="1.2151%" height="15" fill="rgb(210,31,41)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="751.50"></text></g><g><title>brad::main (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="725" width="1.2151%" height="15" fill="rgb(221,200,47)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="735.50"></text></g><g><title>brad::main2 (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="709" width="1.2151%" height="15" fill="rgb(226,26,5)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="719.50"></text></g><g><title>brad::compiler::Compiler::lua (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="693" width="1.2151%" height="15" fill="rgb(249,33,26)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="703.50"></text></g><g><title>brad::compiler::Compiler::lower2 (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="677" width="1.2151%" height="15" fill="rgb(235,183,28)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="687.50"></text></g><g><title>brad::lower2::Lowerer::finish (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="661" width="1.2151%" height="15" fill="rgb(221,5,38)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="671.50"></text></g><g><title>brad::lower2::Lowerer::lower_functions (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="645" width="1.2151%" height="15" fill="rgb(247,18,42)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="655.50"></text></g><g><title>brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="629" width="1.2151%" height="15" fill="rgb(241,131,45)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="639.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::expr (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="613" width="1.2151%" height="15" fill="rgb(249,31,29)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="623.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::block_expr (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="597" width="1.2151%" height="15" fill="rgb(225,111,53)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="607.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::expr (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="581" width="1.2151%" height="15" fill="rgb(238,160,17)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="591.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::let_expr (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="565" width="1.2151%" height="15" fill="rgb(214,148,48)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="575.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="549" width="1.2151%" height="15" fill="rgb(232,36,49)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="559.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="533" width="1.2151%" height="15" fill="rgb(209,103,24)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="543.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="517" width="1.2151%" height="15" fill="rgb(229,88,8)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="527.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="501" width="1.2151%" height="15" fill="rgb(213,181,19)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="511.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="485" width="1.2151%" height="15" fill="rgb(254,191,54)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="495.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_apps (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="469" width="1.2151%" height="15" fill="rgb(241,83,37)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="479.50"></text></g><g><title>brad_solve::tcx::Tcx::make_normal_form (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="453" width="1.2151%" height="15" fill="rgb(233,36,39)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="463.50"></text></g><g><title>brad_solve::ty::Type::neg (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="437" width="1.2151%" height="15" fill="rgb(226,3,54)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,030,803 samples, 1.22%)</title><rect x="9.3018%" y="421" width="1.2151%" height="15" fill="rgb(245,192,40)" fg:x="15546380" fg:w="2030803"/><text x="9.5518%" y="431.50"></text></g><g><title>__sysconf (1,031,247 samples, 0.62%)</title><rect x="10.5169%" y="725" width="0.6170%" height="15" fill="rgb(238,167,29)" fg:x="17577183" fg:w="1031247"/><text x="10.7669%" y="735.50"></text></g><g><title>__getpagesize (1,031,247 samples, 0.62%)</title><rect x="10.5169%" y="709" width="0.6170%" height="15" fill="rgb(232,182,51)" fg:x="17577183" fg:w="1031247"/><text x="10.7669%" y="719.50"></text></g><g><title>&lt;brad_solve::ty::Conjunct as core::clone::Clone&gt;::clone (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="453" width="2.5838%" height="15" fill="rgb(231,60,39)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="463.50">&lt;b..</text></g><g><title>&lt;brad_solve::ty::Term as core::clone::Clone&gt;::clone (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="437" width="2.5838%" height="15" fill="rgb(208,69,12)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="447.50">&lt;b..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="421" width="2.5838%" height="15" fill="rgb(235,93,37)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="431.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="405" width="2.5838%" height="15" fill="rgb(213,116,39)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="415.50">al..</text></g><g><title>alloc::slice::hack::to_vec (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="389" width="2.5838%" height="15" fill="rgb(222,207,29)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="399.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="373" width="2.5838%" height="15" fill="rgb(206,96,30)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="383.50">&lt;T..</text></g><g><title>&lt;brad_solve::ty::app::App as core::clone::Clone&gt;::clone (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="357" width="2.5838%" height="15" fill="rgb(218,138,4)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="367.50">&lt;b..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="341" width="2.5838%" height="15" fill="rgb(250,191,14)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="351.50">&lt;a..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="325" width="2.5838%" height="15" fill="rgb(239,60,40)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="335.50">co..</text></g><g><title>core::sync::atomic::atomic_add (4,318,343 samples, 2.58%)</title><rect x="11.1339%" y="309" width="2.5838%" height="15" fill="rgb(206,27,48)" fg:x="18608430" fg:w="4318343"/><text x="11.3839%" y="319.50">co..</text></g><g><title>brad_solve::tcx::Tcx::expand_application (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="421" width="1.3394%" height="15" fill="rgb(225,35,8)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="405" width="1.3394%" height="15" fill="rgb(250,213,24)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="389" width="1.3394%" height="15" fill="rgb(247,123,22)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="373" width="1.3394%" height="15" fill="rgb(231,138,38)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="357" width="1.3394%" height="15" fill="rgb(231,145,46)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="341" width="1.3394%" height="15" fill="rgb(251,118,11)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="325" width="1.3394%" height="15" fill="rgb(217,147,25)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="335.50"></text></g><g><title>&lt;core::hash::BuildHasherDefault&lt;H&gt; as core::hash::BuildHasher&gt;::build_hasher (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="309" width="1.3394%" height="15" fill="rgb(247,81,37)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="319.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::default::Default&gt;::default (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="293" width="1.3394%" height="15" fill="rgb(209,12,38)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="303.50"></text></g><g><title>seahash::stream::SeaHasher::with_seeds (2,238,621 samples, 1.34%)</title><rect x="13.7177%" y="277" width="1.3394%" height="15" fill="rgb(227,1,9)" fg:x="22926773" fg:w="2238621"/><text x="13.9677%" y="287.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (4,434,907 samples, 2.65%)</title><rect x="13.7177%" y="453" width="2.6535%" height="15" fill="rgb(248,47,43)" fg:x="22926773" fg:w="4434907"/><text x="13.9677%" y="463.50">br..</text></g><g><title>brad_solve::tcx::Tcx::constrain_apps (4,434,907 samples, 2.65%)</title><rect x="13.7177%" y="437" width="2.6535%" height="15" fill="rgb(221,10,30)" fg:x="22926773" fg:w="4434907"/><text x="13.9677%" y="447.50">br..</text></g><g><title>brad_solve::tcx::Tcx::make_normal_form (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="421" width="1.3141%" height="15" fill="rgb(210,229,1)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="405" width="1.3141%" height="15" fill="rgb(222,148,37)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::Conjunct&gt;&gt; (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="389" width="1.3141%" height="15" fill="rgb(234,67,33)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="373" width="1.3141%" height="15" fill="rgb(247,98,35)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[brad_solve::ty::Conjunct]&gt; (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="357" width="1.3141%" height="15" fill="rgb(247,138,52)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Conjunct&gt; (2,196,286 samples, 1.31%)</title><rect x="15.0571%" y="341" width="1.3141%" height="15" fill="rgb(213,79,30)" fg:x="25165394" fg:w="2196286"/><text x="15.3071%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Conjunct&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="453" width="1.1560%" height="15" fill="rgb(246,177,23)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Term&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="437" width="1.1560%" height="15" fill="rgb(230,62,27)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::app::App&gt;&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="421" width="1.1560%" height="15" fill="rgb(216,154,8)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="405" width="1.1560%" height="15" fill="rgb(244,35,45)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[brad_solve::ty::app::App]&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="389" width="1.1560%" height="15" fill="rgb(251,115,12)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::app::App&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="373" width="1.1560%" height="15" fill="rgb(240,54,50)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[brad_solve::ty::Type]&gt;&gt; (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="357" width="1.1560%" height="15" fill="rgb(233,84,52)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="341" width="1.1560%" height="15" fill="rgb(207,117,47)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="325" width="1.1560%" height="15" fill="rgb(249,43,39)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,931,991 samples, 1.16%)</title><rect x="16.3712%" y="309" width="1.1560%" height="15" fill="rgb(209,38,44)" fg:x="27361680" fg:w="1931991"/><text x="16.6212%" y="319.50"></text></g><g><title>&lt;brad_solve::ty::tag::Tag as core::hash::Hash&gt;::hash (10,861,698 samples, 6.50%)</title><rect x="17.5272%" y="245" width="6.4989%" height="15" fill="rgb(236,212,23)" fg:x="29293671" fg:w="10861698"/><text x="17.7772%" y="255.50">&lt;brad_sol..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10,861,698 samples, 6.50%)</title><rect x="17.5272%" y="229" width="6.4989%" height="15" fill="rgb(242,79,21)" fg:x="29293671" fg:w="10861698"/><text x="17.7772%" y="239.50">core::has..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u64 (10,861,698 samples, 6.50%)</title><rect x="17.5272%" y="213" width="6.4989%" height="15" fill="rgb(211,96,35)" fg:x="29293671" fg:w="10861698"/><text x="17.7772%" y="223.50">&lt;seahash:..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (10,861,698 samples, 6.50%)</title><rect x="17.5272%" y="197" width="6.4989%" height="15" fill="rgb(253,215,40)" fg:x="29293671" fg:w="10861698"/><text x="17.7772%" y="207.50">&lt;seahash:..</text></g><g><title>seahash::stream::SeaHasher::push_bytes (10,861,698 samples, 6.50%)</title><rect x="17.5272%" y="181" width="6.4989%" height="15" fill="rgb(211,81,21)" fg:x="29293671" fg:w="10861698"/><text x="17.7772%" y="191.50">seahash::..</text></g><g><title>seahash::stream::SeaHasher::push (6,718,919 samples, 4.02%)</title><rect x="20.0060%" y="165" width="4.0201%" height="15" fill="rgb(208,190,38)" fg:x="33436450" fg:w="6718919"/><text x="20.2560%" y="175.50">seah..</text></g><g><title>seahash::helper::diffuse (4,477,063 samples, 2.68%)</title><rect x="21.3473%" y="149" width="2.6788%" height="15" fill="rgb(235,213,38)" fg:x="35678306" fg:w="4477063"/><text x="21.5973%" y="159.50">se..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="453" width="7.7148%" height="15" fill="rgb(237,122,38)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="463.50">std::collec..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="437" width="7.7148%" height="15" fill="rgb(244,218,35)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="447.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="421" width="7.7148%" height="15" fill="rgb(240,68,47)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="431.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="405" width="7.7148%" height="15" fill="rgb(210,16,53)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="415.50">hashbrown::..</text></g><g><title>hashbrown::map::make_hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="389" width="7.7148%" height="15" fill="rgb(235,124,12)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="399.50">hashbrown::..</text></g><g><title>core::hash::BuildHasher::hash_one (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="373" width="7.7148%" height="15" fill="rgb(224,169,11)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="383.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="357" width="7.7148%" height="15" fill="rgb(250,166,2)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="367.50">core::hash:..</text></g><g><title>&lt;brad_solve::ty::Conjunct as core::hash::Hash&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="341" width="7.7148%" height="15" fill="rgb(242,216,29)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="351.50">&lt;brad_solve..</text></g><g><title>&lt;brad_solve::ty::Term as core::hash::Hash&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="325" width="7.7148%" height="15" fill="rgb(230,116,27)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="335.50">&lt;brad_solve..</text></g><g><title>&lt;brad_solve::ty::tag::Tags as core::hash::Hash&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="309" width="7.7148%" height="15" fill="rgb(228,99,48)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="319.50">&lt;brad_solve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="293" width="7.7148%" height="15" fill="rgb(253,11,6)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="303.50">&lt;alloc::vec..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="277" width="7.7148%" height="15" fill="rgb(247,143,39)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="287.50">core::hash:..</text></g><g><title>core::hash::Hash::hash_slice (12,894,019 samples, 7.71%)</title><rect x="17.5272%" y="261" width="7.7148%" height="15" fill="rgb(236,97,10)" fg:x="29293671" fg:w="12894019"/><text x="17.7772%" y="271.50">core::hash:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,032,321 samples, 1.22%)</title><rect x="24.0261%" y="245" width="1.2160%" height="15" fill="rgb(233,208,19)" fg:x="40155369" fg:w="2032321"/><text x="24.2761%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::hash::Hash&gt;::hash (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="133" width="2.5842%" height="15" fill="rgb(216,164,2)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="143.50">&lt;a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="117" width="2.5842%" height="15" fill="rgb(220,129,5)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="127.50">co..</text></g><g><title>core::hash::Hasher::write_length_prefix (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="101" width="2.5842%" height="15" fill="rgb(242,17,10)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="111.50">co..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_usize (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="85" width="2.5842%" height="15" fill="rgb(242,107,0)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="95.50">&lt;s..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="69" width="2.5842%" height="15" fill="rgb(251,28,31)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="79.50">&lt;s..</text></g><g><title>seahash::stream::SeaHasher::push_bytes (4,319,089 samples, 2.58%)</title><rect x="25.2421%" y="53" width="2.5842%" height="15" fill="rgb(233,223,10)" fg:x="42187690" fg:w="4319089"/><text x="25.4921%" y="63.50">se..</text></g><g><title>seahash::stream::SeaHasher::push (2,223,063 samples, 1.33%)</title><rect x="26.4962%" y="37" width="1.3301%" height="15" fill="rgb(215,21,27)" fg:x="44283716" fg:w="2223063"/><text x="26.7462%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (6,345,282 samples, 3.80%)</title><rect x="25.2421%" y="197" width="3.7966%" height="15" fill="rgb(232,23,21)" fg:x="42187690" fg:w="6345282"/><text x="25.4921%" y="207.50">&lt;all..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6,345,282 samples, 3.80%)</title><rect x="25.2421%" y="181" width="3.7966%" height="15" fill="rgb(244,5,23)" fg:x="42187690" fg:w="6345282"/><text x="25.4921%" y="191.50">core..</text></g><g><title>core::hash::Hash::hash_slice (6,345,282 samples, 3.80%)</title><rect x="25.2421%" y="165" width="3.7966%" height="15" fill="rgb(226,81,46)" fg:x="42187690" fg:w="6345282"/><text x="25.4921%" y="175.50">core..</text></g><g><title>&lt;brad_solve::ty::app::App as core::hash::Hash&gt;::hash (6,345,282 samples, 3.80%)</title><rect x="25.2421%" y="149" width="3.7966%" height="15" fill="rgb(247,70,30)" fg:x="42187690" fg:w="6345282"/><text x="25.4921%" y="159.50">&lt;bra..</text></g><g><title>&lt;brad_solve::ty::tag::Tag as core::hash::Hash&gt;::hash (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="133" width="1.2123%" height="15" fill="rgb(212,68,19)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="117" width="1.2123%" height="15" fill="rgb(240,187,13)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="127.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u64 (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="101" width="1.2123%" height="15" fill="rgb(223,113,26)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="111.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="85" width="1.2123%" height="15" fill="rgb(206,192,2)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="95.50"></text></g><g><title>seahash::stream::SeaHasher::push_bytes (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="69" width="1.2123%" height="15" fill="rgb(241,108,4)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="79.50"></text></g><g><title>seahash::stream::SeaHasher::push (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="53" width="1.2123%" height="15" fill="rgb(247,173,49)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="63.50"></text></g><g><title>seahash::helper::diffuse (2,026,193 samples, 1.21%)</title><rect x="27.8263%" y="37" width="1.2123%" height="15" fill="rgb(224,114,35)" fg:x="46506779" fg:w="2026193"/><text x="28.0763%" y="47.50"></text></g><g><title>&lt;brad_solve::ty::Conjunct as core::hash::Hash&gt;::hash (8,568,821 samples, 5.13%)</title><rect x="25.2421%" y="229" width="5.1270%" height="15" fill="rgb(245,159,27)" fg:x="42187690" fg:w="8568821"/><text x="25.4921%" y="239.50">&lt;brad_..</text></g><g><title>&lt;brad_solve::ty::Term as core::hash::Hash&gt;::hash (8,568,821 samples, 5.13%)</title><rect x="25.2421%" y="213" width="5.1270%" height="15" fill="rgb(245,172,44)" fg:x="42187690" fg:w="8568821"/><text x="25.4921%" y="223.50">&lt;brad_..</text></g><g><title>&lt;brad_solve::ty::tag::Tags as core::hash::Hash&gt;::hash (2,223,539 samples, 1.33%)</title><rect x="29.0386%" y="197" width="1.3304%" height="15" fill="rgb(236,23,11)" fg:x="48532972" fg:w="2223539"/><text x="29.2886%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (2,223,539 samples, 1.33%)</title><rect x="29.0386%" y="181" width="1.3304%" height="15" fill="rgb(205,117,38)" fg:x="48532972" fg:w="2223539"/><text x="29.2886%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,223,539 samples, 1.33%)</title><rect x="29.0386%" y="165" width="1.3304%" height="15" fill="rgb(237,72,25)" fg:x="48532972" fg:w="2223539"/><text x="29.2886%" y="175.50"></text></g><g><title>core::hash::Hash::hash_slice (2,223,539 samples, 1.33%)</title><rect x="29.0386%" y="149" width="1.3304%" height="15" fill="rgb(244,70,9)" fg:x="48532972" fg:w="2223539"/><text x="29.2886%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="405" width="6.4456%" height="15" fill="rgb(217,125,39)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="415.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="389" width="6.4456%" height="15" fill="rgb(235,36,10)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="399.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="373" width="6.4456%" height="15" fill="rgb(251,123,47)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="383.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="357" width="6.4456%" height="15" fill="rgb(221,13,13)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="367.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="341" width="6.4456%" height="15" fill="rgb(238,131,9)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="351.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="325" width="6.4456%" height="15" fill="rgb(211,50,8)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="335.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="309" width="6.4456%" height="15" fill="rgb(245,182,24)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="319.50">hashbrow..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="293" width="6.4456%" height="15" fill="rgb(242,14,37)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="303.50">hashbrow..</text></g><g><title>hashbrown::map::make_hash (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="277" width="6.4456%" height="15" fill="rgb(246,228,12)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="287.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="261" width="6.4456%" height="15" fill="rgb(213,55,15)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="271.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,772,643 samples, 6.45%)</title><rect x="25.2421%" y="245" width="6.4456%" height="15" fill="rgb(209,9,3)" fg:x="42187690" fg:w="10772643"/><text x="25.4921%" y="255.50">core::ha..</text></g><g><title>&lt;brad_solve::ty::base::Base as core::hash::Hash&gt;::hash (2,203,822 samples, 1.32%)</title><rect x="30.3690%" y="229" width="1.3186%" height="15" fill="rgb(230,59,30)" fg:x="50756511" fg:w="2203822"/><text x="30.6190%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2,203,822 samples, 1.32%)</title><rect x="30.3690%" y="213" width="1.3186%" height="15" fill="rgb(209,121,21)" fg:x="50756511" fg:w="2203822"/><text x="30.6190%" y="223.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_isize (2,203,822 samples, 1.32%)</title><rect x="30.3690%" y="197" width="1.3186%" height="15" fill="rgb(220,109,13)" fg:x="50756511" fg:w="2203822"/><text x="30.6190%" y="207.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2,203,822 samples, 1.32%)</title><rect x="30.3690%" y="181" width="1.3186%" height="15" fill="rgb(232,18,1)" fg:x="50756511" fg:w="2203822"/><text x="30.6190%" y="191.50"></text></g><g><title>seahash::stream::SeaHasher::push_bytes (2,203,822 samples, 1.32%)</title><rect x="30.3690%" y="165" width="1.3186%" height="15" fill="rgb(215,41,42)" fg:x="50756511" fg:w="2203822"/><text x="30.6190%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="325" width="3.7051%" height="15" fill="rgb(224,123,36)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="335.50">&lt;all..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="309" width="3.7051%" height="15" fill="rgb(240,125,3)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="319.50">core..</text></g><g><title>core::hash::Hash::hash_slice (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="293" width="3.7051%" height="15" fill="rgb(205,98,50)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="303.50">core..</text></g><g><title>&lt;brad_solve::ty::app::App as core::hash::Hash&gt;::hash (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="277" width="3.7051%" height="15" fill="rgb(205,185,37)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="287.50">&lt;bra..</text></g><g><title>&lt;brad_solve::ty::tag::Tag as core::hash::Hash&gt;::hash (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="261" width="3.7051%" height="15" fill="rgb(238,207,15)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="271.50">&lt;bra..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="245" width="3.7051%" height="15" fill="rgb(213,199,42)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="255.50">core..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u64 (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="229" width="3.7051%" height="15" fill="rgb(235,201,11)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="239.50">&lt;sea..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (6,192,359 samples, 3.71%)</title><rect x="31.6876%" y="213" width="3.7051%" height="15" fill="rgb(207,46,11)" fg:x="52960333" fg:w="6192359"/><text x="31.9376%" y="223.50">&lt;sea..</text></g><g><title>seahash::stream::SeaHasher::push_bytes (4,381,043 samples, 2.62%)</title><rect x="32.7714%" y="197" width="2.6213%" height="15" fill="rgb(241,35,35)" fg:x="54771649" fg:w="4381043"/><text x="33.0214%" y="207.50">se..</text></g><g><title>brad::lower2::Lowerer::lower_functions (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="613" width="25.5909%" height="15" fill="rgb(243,32,47)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="623.50">brad::lower2::Lowerer::lower_functions</text></g><g><title>brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="597" width="25.5909%" height="15" fill="rgb(247,202,23)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="607.50">brad::lower2::expr::&lt;impl brad::lower2::L..</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="581" width="25.5909%" height="15" fill="rgb(219,102,11)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="591.50">brad::lower2::expr::ExprLowerer::expr</text></g><g><title>brad::lower2::expr::ExprLowerer::block_expr (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="565" width="25.5909%" height="15" fill="rgb(243,110,44)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="575.50">brad::lower2::expr::ExprLowerer::block_ex..</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="549" width="25.5909%" height="15" fill="rgb(222,74,54)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="559.50">brad::lower2::expr::ExprLowerer::expr</text></g><g><title>brad::lower2::expr::ExprLowerer::let_expr (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="533" width="25.5909%" height="15" fill="rgb(216,99,12)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="543.50">brad::lower2::expr::ExprLowerer::let_expr</text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="517" width="25.5909%" height="15" fill="rgb(226,22,26)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="527.50">brad::lower2::expr::ExprLowerer::subtype</text></g><g><title>brad_solve::tcx::Tcx::subtype (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="501" width="25.5909%" height="15" fill="rgb(217,163,10)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="511.50">brad_solve::tcx::Tcx::subtype</text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="485" width="25.5909%" height="15" fill="rgb(213,25,53)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="495.50">brad_solve::tcx::Tcx::subtype_normal_form</text></g><g><title>brad_solve::tcx::Tcx::constrain (42,770,762 samples, 25.59%)</title><rect x="11.1339%" y="469" width="25.5909%" height="15" fill="rgb(252,105,26)" fg:x="18608430" fg:w="42770762"/><text x="11.3839%" y="479.50">brad_solve::tcx::Tcx::constrain</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (19,191,502 samples, 11.48%)</title><rect x="25.2421%" y="453" width="11.4828%" height="15" fill="rgb(220,39,43)" fg:x="42187690" fg:w="19191502"/><text x="25.4921%" y="463.50">std::collections:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (19,191,502 samples, 11.48%)</title><rect x="25.2421%" y="437" width="11.4828%" height="15" fill="rgb(229,68,48)" fg:x="42187690" fg:w="19191502"/><text x="25.4921%" y="447.50">hashbrown::set::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,191,502 samples, 11.48%)</title><rect x="25.2421%" y="421" width="11.4828%" height="15" fill="rgb(252,8,32)" fg:x="42187690" fg:w="19191502"/><text x="25.4921%" y="431.50">hashbrown::map::H..</text></g><g><title>hashbrown::map::make_hash (8,418,859 samples, 5.04%)</title><rect x="31.6876%" y="405" width="5.0372%" height="15" fill="rgb(223,20,43)" fg:x="52960333" fg:w="8418859"/><text x="31.9376%" y="415.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (8,418,859 samples, 5.04%)</title><rect x="31.6876%" y="389" width="5.0372%" height="15" fill="rgb(229,81,49)" fg:x="52960333" fg:w="8418859"/><text x="31.9376%" y="399.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,418,859 samples, 5.04%)</title><rect x="31.6876%" y="373" width="5.0372%" height="15" fill="rgb(236,28,36)" fg:x="52960333" fg:w="8418859"/><text x="31.9376%" y="383.50">core::..</text></g><g><title>&lt;brad_solve::ty::Conjunct as core::hash::Hash&gt;::hash (8,418,859 samples, 5.04%)</title><rect x="31.6876%" y="357" width="5.0372%" height="15" fill="rgb(249,185,26)" fg:x="52960333" fg:w="8418859"/><text x="31.9376%" y="367.50">&lt;brad_..</text></g><g><title>&lt;brad_solve::ty::Term as core::hash::Hash&gt;::hash (8,418,859 samples, 5.04%)</title><rect x="31.6876%" y="341" width="5.0372%" height="15" fill="rgb(249,174,33)" fg:x="52960333" fg:w="8418859"/><text x="31.9376%" y="351.50">&lt;brad_..</text></g><g><title>&lt;brad_solve::ty::tag::Tags as core::hash::Hash&gt;::hash (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="325" width="1.3322%" height="15" fill="rgb(233,201,37)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="309" width="1.3322%" height="15" fill="rgb(221,78,26)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="293" width="1.3322%" height="15" fill="rgb(250,127,30)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="303.50"></text></g><g><title>core::hash::Hash::hash_slice (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="277" width="1.3322%" height="15" fill="rgb(230,49,44)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="287.50"></text></g><g><title>&lt;brad_solve::ty::tag::Tag as core::hash::Hash&gt;::hash (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="261" width="1.3322%" height="15" fill="rgb(229,67,23)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="245" width="1.3322%" height="15" fill="rgb(249,83,47)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="255.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u64 (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="229" width="1.3322%" height="15" fill="rgb(215,43,3)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="239.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="213" width="1.3322%" height="15" fill="rgb(238,154,13)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="223.50"></text></g><g><title>seahash::stream::SeaHasher::push_bytes (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="197" width="1.3322%" height="15" fill="rgb(219,56,2)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="207.50"></text></g><g><title>seahash::stream::SeaHasher::push (2,226,500 samples, 1.33%)</title><rect x="35.3927%" y="181" width="1.3322%" height="15" fill="rgb(233,0,4)" fg:x="59152692" fg:w="2226500"/><text x="35.6427%" y="191.50"></text></g><g><title>brad::compiler::Compiler::lower2 (44,807,343 samples, 26.81%)</title><rect x="11.1339%" y="645" width="26.8095%" height="15" fill="rgb(235,30,7)" fg:x="18608430" fg:w="44807343"/><text x="11.3839%" y="655.50">brad::compiler::Compiler::lower2</text></g><g><title>brad::lower2::Lowerer::finish (44,807,343 samples, 26.81%)</title><rect x="11.1339%" y="629" width="26.8095%" height="15" fill="rgb(250,79,13)" fg:x="18608430" fg:w="44807343"/><text x="11.3839%" y="639.50">brad::lower2::Lowerer::finish</text></g><g><title>brad::lower2::Lowerer::lower_types (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="613" width="1.2185%" height="15" fill="rgb(211,146,34)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="623.50"></text></g><g><title>brad::lower2::ty::&lt;impl brad::lower2::Lowerer&gt;::lower_ty (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="597" width="1.2185%" height="15" fill="rgb(228,22,38)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="581" width="1.2185%" height="15" fill="rgb(235,168,5)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="591.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="565" width="1.2185%" height="15" fill="rgb(221,155,16)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="575.50"></text></g><g><title>brad_solve::ty::Type::union (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="549" width="1.2185%" height="15" fill="rgb(215,215,53)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="559.50"></text></g><g><title>brad_solve::ty::Type::simplify_heuristic (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="533" width="1.2185%" height="15" fill="rgb(223,4,10)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="543.50"></text></g><g><title>brad_solve::ty::Conjunct::is_subtype_heuristic (2,036,581 samples, 1.22%)</title><rect x="36.7249%" y="517" width="1.2185%" height="15" fill="rgb(234,103,6)" fg:x="61379192" fg:w="2036581"/><text x="36.9749%" y="527.50"></text></g><g><title>brad_solve::ty::Term::is_extreme (1,015,757 samples, 0.61%)</title><rect x="37.3357%" y="501" width="0.6078%" height="15" fill="rgb(227,97,0)" fg:x="62400016" fg:w="1015757"/><text x="37.5857%" y="511.50"></text></g><g><title>brad::lua::codegen (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="645" width="1.2352%" height="15" fill="rgb(234,150,53)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="655.50"></text></g><g><title>brad::lua::codegen_body (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="629" width="1.2352%" height="15" fill="rgb(228,201,54)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="639.50"></text></g><g><title>brad::lua::Codegen&lt;W&gt;::expr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="613" width="1.2352%" height="15" fill="rgb(222,22,37)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="623.50"></text></g><g><title>brad::lua::Codegen&lt;W&gt;::expr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="597" width="1.2352%" height="15" fill="rgb(237,53,32)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="607.50"></text></g><g><title>brad::lua::Codegen&lt;W&gt;::expr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="581" width="1.2352%" height="15" fill="rgb(233,25,53)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="591.50"></text></g><g><title>brad::lua::Codegen&lt;W&gt;::expr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="565" width="1.2352%" height="15" fill="rgb(210,40,34)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="575.50"></text></g><g><title>alloc::fmt::format (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="549" width="1.2352%" height="15" fill="rgb(241,220,44)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="533" width="1.2352%" height="15" fill="rgb(235,28,35)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="543.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="517" width="1.2352%" height="15" fill="rgb(210,56,17)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="501" width="1.2352%" height="15" fill="rgb(224,130,29)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="485" width="1.2352%" height="15" fill="rgb(235,212,8)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="469" width="1.2352%" height="15" fill="rgb(223,33,50)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="479.50"></text></g><g><title>core::fmt::write (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="453" width="1.2352%" height="15" fill="rgb(219,149,13)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="437" width="1.2352%" height="15" fill="rgb(250,156,29)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="421" width="1.2352%" height="15" fill="rgb(216,193,19)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="405" width="1.2352%" height="15" fill="rgb(216,135,14)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="415.50"></text></g><g><title>alloc::string::String::as_str (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="389" width="1.2352%" height="15" fill="rgb(241,47,5)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="373" width="1.2352%" height="15" fill="rgb(233,42,35)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="357" width="1.2352%" height="15" fill="rgb(231,13,6)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="341" width="1.2352%" height="15" fill="rgb(207,181,40)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="325" width="1.2352%" height="15" fill="rgb(254,173,49)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,064,363 samples, 1.24%)</title><rect x="37.9434%" y="309" width="1.2352%" height="15" fill="rgb(221,1,38)" fg:x="63415773" fg:w="2064363"/><text x="38.1934%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::app::App&gt;&gt; (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="421" width="1.0732%" height="15" fill="rgb(206,124,46)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="405" width="1.0732%" height="15" fill="rgb(249,21,11)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[brad_solve::ty::app::App]&gt; (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="389" width="1.0732%" height="15" fill="rgb(222,201,40)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::app::App&gt; (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="373" width="1.0732%" height="15" fill="rgb(235,61,29)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[brad_solve::ty::Type]&gt;&gt; (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="357" width="1.0732%" height="15" fill="rgb(219,207,3)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="341" width="1.0732%" height="15" fill="rgb(222,56,46)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="325" width="1.0732%" height="15" fill="rgb(239,76,54)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,793,606 samples, 1.07%)</title><rect x="39.1786%" y="309" width="1.0732%" height="15" fill="rgb(231,124,27)" fg:x="65480136" fg:w="1793606"/><text x="39.4286%" y="319.50"></text></g><g><title>__libc_start_call_main (51,561,251 samples, 30.85%)</title><rect x="10.5169%" y="757" width="30.8505%" height="15" fill="rgb(249,195,6)" fg:x="17577183" fg:w="51561251"/><text x="10.7669%" y="767.50">__libc_start_call_main</text></g><g><title>main (51,561,251 samples, 30.85%)</title><rect x="10.5169%" y="741" width="30.8505%" height="15" fill="rgb(237,174,47)" fg:x="17577183" fg:w="51561251"/><text x="10.7669%" y="751.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (50,530,004 samples, 30.23%)</title><rect x="11.1339%" y="725" width="30.2335%" height="15" fill="rgb(206,201,31)" fg:x="18608430" fg:w="50530004"/><text x="11.3839%" y="735.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (50,530,004 samples, 30.23%)</title><rect x="11.1339%" y="709" width="30.2335%" height="15" fill="rgb(231,57,52)" fg:x="18608430" fg:w="50530004"/><text x="11.3839%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>brad::main (50,530,004 samples, 30.23%)</title><rect x="11.1339%" y="693" width="30.2335%" height="15" fill="rgb(248,177,22)" fg:x="18608430" fg:w="50530004"/><text x="11.3839%" y="703.50">brad::main</text></g><g><title>brad::main2 (50,530,004 samples, 30.23%)</title><rect x="11.1339%" y="677" width="30.2335%" height="15" fill="rgb(215,211,37)" fg:x="18608430" fg:w="50530004"/><text x="11.3839%" y="687.50">brad::main2</text></g><g><title>brad::compiler::Compiler::lua (50,530,004 samples, 30.23%)</title><rect x="11.1339%" y="661" width="30.2335%" height="15" fill="rgb(241,128,51)" fg:x="18608430" fg:w="50530004"/><text x="11.3839%" y="671.50">brad::compiler::Compiler::lua</text></g><g><title>core::ptr::drop_in_place&lt;brad::hir2::program::Program&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="645" width="2.1889%" height="15" fill="rgb(227,165,31)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::tcx::Tcx&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="629" width="2.1889%" height="15" fill="rgb(228,167,24)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="639.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;brad_solve::ty::Conjunct,core::hash::BuildHasherDefault&lt;seahash::stream::SeaHasher&gt;&gt;&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="613" width="2.1889%" height="15" fill="rgb(228,143,12)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="623.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;brad_solve::ty::Conjunct,core::hash::BuildHasherDefault&lt;seahash::stream::SeaHasher&gt;&gt;&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="597" width="2.1889%" height="15" fill="rgb(249,149,8)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;brad_solve::ty::Conjunct,(),core::hash::BuildHasherDefault&lt;seahash::stream::SeaHasher&gt;&gt;&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="581" width="2.1889%" height="15" fill="rgb(243,35,44)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(brad_solve::ty::Conjunct,())&gt;&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="565" width="2.1889%" height="15" fill="rgb(246,89,9)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="575.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="549" width="2.1889%" height="15" fill="rgb(233,213,13)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="559.50">&lt;..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="533" width="2.1889%" height="15" fill="rgb(233,141,41)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="543.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="517" width="2.1889%" height="15" fill="rgb(239,167,4)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="527.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="501" width="2.1889%" height="15" fill="rgb(209,217,16)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="511.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="485" width="2.1889%" height="15" fill="rgb(219,88,35)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;(brad_solve::ty::Conjunct,())&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="469" width="2.1889%" height="15" fill="rgb(220,193,23)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="479.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Conjunct&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="453" width="2.1889%" height="15" fill="rgb(230,90,52)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Term&gt; (3,658,298 samples, 2.19%)</title><rect x="39.1786%" y="437" width="2.1889%" height="15" fill="rgb(252,106,19)" fg:x="65480136" fg:w="3658298"/><text x="39.4286%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::tag::Tags&gt; (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="421" width="1.1157%" height="15" fill="rgb(206,74,20)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::tag::Tag&gt;&gt; (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="405" width="1.1157%" height="15" fill="rgb(230,138,44)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;brad_solve::ty::tag::Tag&gt;&gt; (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="389" width="1.1157%" height="15" fill="rgb(235,182,43)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="373" width="1.1157%" height="15" fill="rgb(242,16,51)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="357" width="1.1157%" height="15" fill="rgb(248,9,4)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="341" width="1.1157%" height="15" fill="rgb(210,31,22)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="325" width="1.1157%" height="15" fill="rgb(239,54,39)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="335.50"></text></g><g><title>__rdl_dealloc (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="309" width="1.1157%" height="15" fill="rgb(230,99,41)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="293" width="1.1157%" height="15" fill="rgb(253,106,12)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="277" width="1.1157%" height="15" fill="rgb(213,46,41)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="287.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="261" width="1.1157%" height="15" fill="rgb(215,133,35)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="271.50"></text></g><g><title>malloc_consolidate (1,864,692 samples, 1.12%)</title><rect x="40.2517%" y="245" width="1.1157%" height="15" fill="rgb(213,28,5)" fg:x="67273742" fg:w="1864692"/><text x="40.5017%" y="255.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (52,613,658 samples, 31.48%)</title><rect x="10.5169%" y="773" width="31.4802%" height="15" fill="rgb(215,77,49)" fg:x="17577183" fg:w="52613658"/><text x="10.7669%" y="783.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__static_initialization_and_destruction_0 (1,052,407 samples, 0.63%)</title><rect x="41.3674%" y="757" width="0.6297%" height="15" fill="rgb(248,100,22)" fg:x="69138434" fg:w="1052407"/><text x="41.6174%" y="767.50"></text></g><g><title>llvm::cl::Option::addArgument (1,052,407 samples, 0.63%)</title><rect x="41.3674%" y="741" width="0.6297%" height="15" fill="rgb(208,67,9)" fg:x="69138434" fg:w="1052407"/><text x="41.6174%" y="751.50"></text></g><g><title>std::pair&lt;llvm::StringMapIterator&lt;llvm::cl::Option*&gt;, bool&gt; llvm::StringMap&lt;llvm::cl::Option*, llvm::MallocAllocator&gt;::try_emplace_with_hash&lt;llvm::cl::Option*&gt; (1,052,407 samples, 0.63%)</title><rect x="41.3674%" y="725" width="0.6297%" height="15" fill="rgb(219,133,21)" fg:x="69138434" fg:w="1052407"/><text x="41.6174%" y="735.50"></text></g><g><title>llvm::StringMapImpl::LookupBucketFor (1,052,407 samples, 0.63%)</title><rect x="41.3674%" y="709" width="0.6297%" height="15" fill="rgb(246,46,29)" fg:x="69138434" fg:w="1052407"/><text x="41.6174%" y="719.50"></text></g><g><title>_start (56,379,271 samples, 33.73%)</title><rect x="10.5169%" y="789" width="33.7333%" height="15" fill="rgb(246,185,52)" fg:x="17577183" fg:w="56379271"/><text x="10.7669%" y="799.50">_start</text></g><g><title>_dl_start (3,765,613 samples, 2.25%)</title><rect x="41.9971%" y="773" width="2.2531%" height="15" fill="rgb(252,136,11)" fg:x="70190841" fg:w="3765613"/><text x="42.2471%" y="783.50">_..</text></g><g><title>_dl_sysdep_start (3,765,613 samples, 2.25%)</title><rect x="41.9971%" y="757" width="2.2531%" height="15" fill="rgb(219,138,53)" fg:x="70190841" fg:w="3765613"/><text x="42.2471%" y="767.50">_..</text></g><g><title>dl_main (3,765,613 samples, 2.25%)</title><rect x="41.9971%" y="741" width="2.2531%" height="15" fill="rgb(211,51,23)" fg:x="70190841" fg:w="3765613"/><text x="42.2471%" y="751.50">d..</text></g><g><title>_dl_relocate_object (3,765,613 samples, 2.25%)</title><rect x="41.9971%" y="725" width="2.2531%" height="15" fill="rgb(247,221,28)" fg:x="70190841" fg:w="3765613"/><text x="42.2471%" y="735.50">_..</text></g><g><title>_dl_lookup_symbol_x (2,724,410 samples, 1.63%)</title><rect x="42.6201%" y="709" width="1.6301%" height="15" fill="rgb(251,222,45)" fg:x="71232044" fg:w="2724410"/><text x="42.8701%" y="719.50"></text></g><g><title>do_lookup_x (2,004,411 samples, 1.20%)</title><rect x="43.0509%" y="693" width="1.1993%" height="15" fill="rgb(217,162,53)" fg:x="71952043" fg:w="2004411"/><text x="43.3009%" y="703.50"></text></g><g><title>check_match (1,097,781 samples, 0.66%)</title><rect x="43.5934%" y="677" width="0.6568%" height="15" fill="rgb(229,93,14)" fg:x="72858673" fg:w="1097781"/><text x="43.8434%" y="687.50"></text></g><g><title>strcmp (1,097,781 samples, 0.66%)</title><rect x="43.5934%" y="661" width="0.6568%" height="15" fill="rgb(209,67,49)" fg:x="72858673" fg:w="1097781"/><text x="43.8434%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,239,187 samples, 1.34%)</title><rect x="44.2502%" y="789" width="1.3398%" height="15" fill="rgb(213,87,29)" fg:x="73956454" fg:w="2239187"/><text x="44.5002%" y="799.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::expr (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="629" width="1.6580%" height="15" fill="rgb(205,151,52)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="639.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::call_expr (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="613" width="1.6580%" height="15" fill="rgb(253,215,39)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="623.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="597" width="1.6580%" height="15" fill="rgb(221,220,41)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="607.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="581" width="1.6580%" height="15" fill="rgb(218,133,21)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="591.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="565" width="1.6580%" height="15" fill="rgb(221,193,43)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="575.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="549" width="1.6580%" height="15" fill="rgb(240,128,52)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="559.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="533" width="1.6580%" height="15" fill="rgb(253,114,12)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="543.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_vars (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="517" width="1.6580%" height="15" fill="rgb(215,223,47)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="527.50"></text></g><g><title>brad_solve::ty::Type::union_mut (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="501" width="1.6580%" height="15" fill="rgb(248,225,23)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="511.50"></text></g><g><title>brad_solve::ty::Type::union (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="485" width="1.6580%" height="15" fill="rgb(250,108,0)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="495.50"></text></g><g><title>brad_solve::ty::Type::simplify_heuristic (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="469" width="1.6580%" height="15" fill="rgb(228,208,7)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="479.50"></text></g><g><title>brad_solve::ty::Conjunct::is_subtype_heuristic (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="453" width="1.6580%" height="15" fill="rgb(244,45,10)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="463.50"></text></g><g><title>brad_solve::ty::Term::is_subtype_heuristic (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="437" width="1.6580%" height="15" fill="rgb(207,125,25)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="421" width="1.6580%" height="15" fill="rgb(210,195,18)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,770,977 samples, 1.66%)</title><rect x="45.5900%" y="405" width="1.6580%" height="15" fill="rgb(249,80,12)" fg:x="76195641" fg:w="2770977"/><text x="45.8400%" y="415.50"></text></g><g><title>&lt;brad_solve::ty::Conjunct as core::clone::Clone&gt;::clone (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="485" width="1.3449%" height="15" fill="rgb(221,65,9)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="495.50"></text></g><g><title>&lt;brad_solve::ty::Term as core::clone::Clone&gt;::clone (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="469" width="1.3449%" height="15" fill="rgb(235,49,36)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="453" width="1.3449%" height="15" fill="rgb(225,32,20)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="437" width="1.3449%" height="15" fill="rgb(215,141,46)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="421" width="1.3449%" height="15" fill="rgb(250,160,47)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="405" width="1.3449%" height="15" fill="rgb(216,222,40)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="389" width="1.3449%" height="15" fill="rgb(234,217,39)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="373" width="1.3449%" height="15" fill="rgb(207,178,40)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="357" width="1.3449%" height="15" fill="rgb(221,136,13)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="341" width="1.3449%" height="15" fill="rgb(249,199,10)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="325" width="1.3449%" height="15" fill="rgb(249,222,13)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="309" width="1.3449%" height="15" fill="rgb(244,185,38)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="293" width="1.3449%" height="15" fill="rgb(236,202,9)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="303.50"></text></g><g><title>__rdl_alloc (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="277" width="1.3449%" height="15" fill="rgb(250,229,37)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="261" width="1.3449%" height="15" fill="rgb(206,174,23)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="271.50"></text></g><g><title>malloc (2,247,811 samples, 1.34%)</title><rect x="47.2479%" y="245" width="1.3449%" height="15" fill="rgb(211,33,43)" fg:x="78966618" fg:w="2247811"/><text x="47.4979%" y="255.50"></text></g><g><title>brad_solve::ty::Conjunct::inter (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="485" width="1.3317%" height="15" fill="rgb(245,58,50)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="495.50"></text></g><g><title>brad_solve::ty::Term::inter_positive (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="469" width="1.3317%" height="15" fill="rgb(244,68,36)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="453" width="1.3317%" height="15" fill="rgb(232,229,15)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="437" width="1.3317%" height="15" fill="rgb(254,30,23)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="421" width="1.3317%" height="15" fill="rgb(235,160,14)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="405" width="1.3317%" height="15" fill="rgb(212,155,44)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,225,680 samples, 1.33%)</title><rect x="48.5928%" y="389" width="1.3317%" height="15" fill="rgb(226,2,50)" fg:x="81214429" fg:w="2225680"/><text x="48.8428%" y="399.50"></text></g><g><title>brad_solve::tcx::Tcx::expand_application (6,594,513 samples, 3.95%)</title><rect x="47.2479%" y="533" width="3.9457%" height="15" fill="rgb(234,177,6)" fg:x="78966618" fg:w="6594513"/><text x="47.4979%" y="543.50">brad..</text></g><g><title>brad_solve::tcx::Tcx::expand_impl (6,594,513 samples, 3.95%)</title><rect x="47.2479%" y="517" width="3.9457%" height="15" fill="rgb(217,24,9)" fg:x="78966618" fg:w="6594513"/><text x="47.4979%" y="527.50">brad..</text></g><g><title>brad_solve::ty::Type::inter (6,594,513 samples, 3.95%)</title><rect x="47.2479%" y="501" width="3.9457%" height="15" fill="rgb(220,13,46)" fg:x="78966618" fg:w="6594513"/><text x="47.4979%" y="511.50">brad..</text></g><g><title>brad_solve::ty::Type::simplify_heuristic (2,121,022 samples, 1.27%)</title><rect x="49.9245%" y="485" width="1.2691%" height="15" fill="rgb(239,221,27)" fg:x="83440109" fg:w="2121022"/><text x="50.1745%" y="495.50"></text></g><g><title>brad_solve::ty::Type::conjuncts_mut (2,121,022 samples, 1.27%)</title><rect x="49.9245%" y="469" width="1.2691%" height="15" fill="rgb(222,198,25)" fg:x="83440109" fg:w="2121022"/><text x="50.1745%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::make_mut (2,121,022 samples, 1.27%)</title><rect x="49.9245%" y="453" width="1.2691%" height="15" fill="rgb(211,99,13)" fg:x="83440109" fg:w="2121022"/><text x="50.1745%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,121,022 samples, 1.27%)</title><rect x="49.9245%" y="437" width="1.2691%" height="15" fill="rgb(232,111,31)" fg:x="83440109" fg:w="2121022"/><text x="50.1745%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,121,022 samples, 1.27%)</title><rect x="49.9245%" y="421" width="1.2691%" height="15" fill="rgb(245,82,37)" fg:x="83440109" fg:w="2121022"/><text x="50.1745%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="453" width="1.2905%" height="15" fill="rgb(227,149,46)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="437" width="1.2905%" height="15" fill="rgb(218,36,50)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="421" width="1.2905%" height="15" fill="rgb(226,80,48)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="405" width="1.2905%" height="15" fill="rgb(238,224,15)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="415.50"></text></g><g><title>&lt;brad_solve::ty::app::App as core::clone::Clone&gt;::clone (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="389" width="1.2905%" height="15" fill="rgb(241,136,10)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="373" width="1.2905%" height="15" fill="rgb(208,32,45)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="357" width="1.2905%" height="15" fill="rgb(207,135,9)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (2,156,884 samples, 1.29%)</title><rect x="51.1936%" y="341" width="1.2905%" height="15" fill="rgb(206,86,44)" fg:x="85561131" fg:w="2156884"/><text x="51.4436%" y="351.50"></text></g><g><title>&lt;brad_solve::ty::Conjunct as core::clone::Clone&gt;::clone (4,399,910 samples, 2.63%)</title><rect x="51.1936%" y="485" width="2.6326%" height="15" fill="rgb(245,177,15)" fg:x="85561131" fg:w="4399910"/><text x="51.4436%" y="495.50">&lt;b..</text></g><g><title>&lt;brad_solve::ty::Term as core::clone::Clone&gt;::clone (4,399,910 samples, 2.63%)</title><rect x="51.1936%" y="469" width="2.6326%" height="15" fill="rgb(206,64,50)" fg:x="85561131" fg:w="4399910"/><text x="51.4436%" y="479.50">&lt;b..</text></g><g><title>&lt;brad_solve::ty::base::Base as core::clone::Clone&gt;::clone (2,243,026 samples, 1.34%)</title><rect x="52.4841%" y="453" width="1.3421%" height="15" fill="rgb(234,36,40)" fg:x="87718015" fg:w="2243026"/><text x="52.7341%" y="463.50"></text></g><g><title>brad::main2 (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="789" width="9.5746%" height="15" fill="rgb(213,64,8)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="799.50">brad::main2</text></g><g><title>brad::compiler::Compiler::lua (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="773" width="9.5746%" height="15" fill="rgb(210,75,36)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="783.50">brad::compiler..</text></g><g><title>brad::compiler::Compiler::lower2 (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="757" width="9.5746%" height="15" fill="rgb(229,88,21)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="767.50">brad::compiler..</text></g><g><title>brad::lower2::Lowerer::finish (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="741" width="9.5746%" height="15" fill="rgb(252,204,47)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="751.50">brad::lower2::..</text></g><g><title>brad::lower2::Lowerer::lower_functions (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="725" width="9.5746%" height="15" fill="rgb(208,77,27)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="735.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="709" width="9.5746%" height="15" fill="rgb(221,76,26)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="719.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="693" width="9.5746%" height="15" fill="rgb(225,139,18)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="703.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::ExprLowerer::block_expr (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="677" width="9.5746%" height="15" fill="rgb(230,137,11)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="687.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="661" width="9.5746%" height="15" fill="rgb(212,28,1)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="671.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::ExprLowerer::let_expr (16,002,268 samples, 9.57%)</title><rect x="45.5900%" y="645" width="9.5746%" height="15" fill="rgb(248,164,17)" fg:x="76195641" fg:w="16002268"/><text x="45.8400%" y="655.50">brad::lower2::..</text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="629" width="7.9166%" height="15" fill="rgb(222,171,42)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="639.50">brad::lower..</text></g><g><title>brad_solve::tcx::Tcx::subtype (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="613" width="7.9166%" height="15" fill="rgb(243,84,45)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="623.50">brad_solve:..</text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="597" width="7.9166%" height="15" fill="rgb(252,49,23)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="607.50">brad_solve:..</text></g><g><title>brad_solve::tcx::Tcx::constrain (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="581" width="7.9166%" height="15" fill="rgb(215,19,7)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="591.50">brad_solve:..</text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="565" width="7.9166%" height="15" fill="rgb(238,81,41)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="575.50">brad_solve:..</text></g><g><title>brad_solve::tcx::Tcx::constrain_apps (13,231,291 samples, 7.92%)</title><rect x="47.2479%" y="549" width="7.9166%" height="15" fill="rgb(210,199,37)" fg:x="78966618" fg:w="13231291"/><text x="47.4979%" y="559.50">brad_solve:..</text></g><g><title>brad_solve::tcx::Tcx::make_normal_form (6,636,778 samples, 3.97%)</title><rect x="51.1936%" y="533" width="3.9710%" height="15" fill="rgb(244,192,49)" fg:x="85561131" fg:w="6636778"/><text x="51.4436%" y="543.50">brad..</text></g><g><title>brad_solve::ty::Type::neg (6,636,778 samples, 3.97%)</title><rect x="51.1936%" y="517" width="3.9710%" height="15" fill="rgb(226,211,11)" fg:x="85561131" fg:w="6636778"/><text x="51.4436%" y="527.50">brad..</text></g><g><title>brad_solve::ty::Type::inter (6,636,778 samples, 3.97%)</title><rect x="51.1936%" y="501" width="3.9710%" height="15" fill="rgb(236,162,54)" fg:x="85561131" fg:w="6636778"/><text x="51.4436%" y="511.50">brad..</text></g><g><title>brad_solve::ty::Conjunct::inter (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="485" width="1.3384%" height="15" fill="rgb(220,229,9)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="495.50"></text></g><g><title>brad_solve::ty::Term::inter_positive (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="469" width="1.3384%" height="15" fill="rgb(250,87,22)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="453" width="1.3384%" height="15" fill="rgb(239,43,17)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="437" width="1.3384%" height="15" fill="rgb(231,177,25)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="421" width="1.3384%" height="15" fill="rgb(219,179,1)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="405" width="1.3384%" height="15" fill="rgb(238,219,53)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,236,868 samples, 1.34%)</title><rect x="53.8262%" y="389" width="1.3384%" height="15" fill="rgb(232,167,36)" fg:x="89961041" fg:w="2236868"/><text x="54.0762%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,129,232 samples, 1.27%)</title><rect x="55.1646%" y="437" width="1.2740%" height="15" fill="rgb(244,19,51)" fg:x="92197909" fg:w="2129232"/><text x="55.4146%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,129,232 samples, 1.27%)</title><rect x="55.1646%" y="421" width="1.2740%" height="15" fill="rgb(224,6,22)" fg:x="92197909" fg:w="2129232"/><text x="55.4146%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,129,232 samples, 1.27%)</title><rect x="55.1646%" y="405" width="1.2740%" height="15" fill="rgb(224,145,5)" fg:x="92197909" fg:w="2129232"/><text x="55.4146%" y="415.50"></text></g><g><title>brad_solve::ty::Term::is_extreme (13,170,934 samples, 7.88%)</title><rect x="61.4250%" y="421" width="7.8805%" height="15" fill="rgb(234,130,49)" fg:x="102661216" fg:w="13170934"/><text x="61.6750%" y="431.50">brad_solve:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,001,829 samples, 7.78%)</title><rect x="69.3056%" y="389" width="7.7794%" height="15" fill="rgb(254,6,2)" fg:x="115832150" fg:w="13001829"/><text x="69.5556%" y="399.50">&lt;core::slic..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4,479,481 samples, 2.68%)</title><rect x="77.0849%" y="373" width="2.6802%" height="15" fill="rgb(208,96,46)" fg:x="128833979" fg:w="4479481"/><text x="77.3349%" y="383.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4,479,481 samples, 2.68%)</title><rect x="77.0849%" y="357" width="2.6802%" height="15" fill="rgb(239,3,39)" fg:x="128833979" fg:w="4479481"/><text x="77.3349%" y="367.50">al..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (2,229,721 samples, 1.33%)</title><rect x="81.0439%" y="325" width="1.3341%" height="15" fill="rgb(233,210,1)" fg:x="135450649" fg:w="2229721"/><text x="81.2939%" y="335.50"></text></g><g><title>&lt;brad_solve::ty::app::App as core::cmp::PartialEq&gt;::eq (2,229,721 samples, 1.33%)</title><rect x="81.0439%" y="309" width="1.3341%" height="15" fill="rgb(244,137,37)" fg:x="135450649" fg:w="2229721"/><text x="81.2939%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (28,162,400 samples, 16.85%)</title><rect x="69.3056%" y="405" width="16.8503%" height="15" fill="rgb(240,136,2)" fg:x="115832150" fg:w="28162400"/><text x="69.5556%" y="415.50">&lt;core::slice::iter::Iter&lt;T..</text></g><g><title>brad_solve::ty::Term::is_subtype_heuristic::_{{closure}} (15,160,571 samples, 9.07%)</title><rect x="77.0849%" y="389" width="9.0710%" height="15" fill="rgb(239,18,37)" fg:x="128833979" fg:w="15160571"/><text x="77.3349%" y="399.50">brad_solve::t..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (10,681,090 samples, 6.39%)</title><rect x="79.7651%" y="373" width="6.3908%" height="15" fill="rgb(218,185,22)" fg:x="133313460" fg:w="10681090"/><text x="80.0151%" y="383.50">core::sl..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (10,681,090 samples, 6.39%)</title><rect x="79.7651%" y="357" width="6.3908%" height="15" fill="rgb(225,218,4)" fg:x="133313460" fg:w="10681090"/><text x="80.0151%" y="367.50">&lt;T as co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (10,681,090 samples, 6.39%)</title><rect x="79.7651%" y="341" width="6.3908%" height="15" fill="rgb(230,182,32)" fg:x="133313460" fg:w="10681090"/><text x="80.0151%" y="351.50">&lt;core::s..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,314,180 samples, 3.78%)</title><rect x="82.3780%" y="325" width="3.7779%" height="15" fill="rgb(242,56,43)" fg:x="137680370" fg:w="6314180"/><text x="82.6280%" y="335.50">&lt;cor..</text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (4,206,383 samples, 2.52%)</title><rect x="88.8450%" y="389" width="2.5168%" height="15" fill="rgb(233,99,24)" fg:x="148488926" fg:w="4206383"/><text x="89.0950%" y="399.50">co..</text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (4,206,383 samples, 2.52%)</title><rect x="88.8450%" y="373" width="2.5168%" height="15" fill="rgb(234,209,42)" fg:x="148488926" fg:w="4206383"/><text x="89.0950%" y="383.50">co..</text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::_{{closure}} (2,226,079 samples, 1.33%)</title><rect x="90.0299%" y="357" width="1.3319%" height="15" fill="rgb(227,7,12)" fg:x="150469230" fg:w="2226079"/><text x="90.2799%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,226,079 samples, 1.33%)</title><rect x="90.0299%" y="341" width="1.3319%" height="15" fill="rgb(245,203,43)" fg:x="150469230" fg:w="2226079"/><text x="90.2799%" y="351.50"></text></g><g><title>brad_solve::tcx::Tcx::expand_application (62,579,603 samples, 37.44%)</title><rect x="55.1646%" y="517" width="37.4431%" height="15" fill="rgb(238,205,33)" fg:x="92197909" fg:w="62579603"/><text x="55.4146%" y="527.50">brad_solve::tcx::Tcx::expand_application</text></g><g><title>brad_solve::tcx::Tcx::expand_impl (62,579,603 samples, 37.44%)</title><rect x="55.1646%" y="501" width="37.4431%" height="15" fill="rgb(231,56,7)" fg:x="92197909" fg:w="62579603"/><text x="55.4146%" y="511.50">brad_solve::tcx::Tcx::expand_impl</text></g><g><title>brad_solve::ty::Type::union_mut (62,579,603 samples, 37.44%)</title><rect x="55.1646%" y="485" width="37.4431%" height="15" fill="rgb(244,186,29)" fg:x="92197909" fg:w="62579603"/><text x="55.4146%" y="495.50">brad_solve::ty::Type::union_mut</text></g><g><title>brad_solve::ty::Type::union (62,579,603 samples, 37.44%)</title><rect x="55.1646%" y="469" width="37.4431%" height="15" fill="rgb(234,111,31)" fg:x="92197909" fg:w="62579603"/><text x="55.4146%" y="479.50">brad_solve::ty::Type::union</text></g><g><title>brad_solve::ty::Type::simplify_heuristic (62,579,603 samples, 37.44%)</title><rect x="55.1646%" y="453" width="37.4431%" height="15" fill="rgb(241,149,10)" fg:x="92197909" fg:w="62579603"/><text x="55.4146%" y="463.50">brad_solve::ty::Type::simplify_heuristic</text></g><g><title>brad_solve::ty::Conjunct::is_subtype_heuristic (60,450,371 samples, 36.17%)</title><rect x="56.4385%" y="437" width="36.1691%" height="15" fill="rgb(249,206,44)" fg:x="94327141" fg:w="60450371"/><text x="56.6885%" y="447.50">brad_solve::ty::Conjunct::is_subtype_heuristic</text></g><g><title>brad_solve::ty::Term::is_subtype_heuristic (38,945,362 samples, 23.30%)</title><rect x="69.3056%" y="421" width="23.3021%" height="15" fill="rgb(251,153,30)" fg:x="115832150" fg:w="38945362"/><text x="69.5556%" y="431.50">brad_solve::ty::Term::is_subtype_heur..</text></g><g><title>brad_solve::ty::tag::Tags::is_subset (10,782,962 samples, 6.45%)</title><rect x="86.1559%" y="405" width="6.4517%" height="15" fill="rgb(239,152,38)" fg:x="143994550" fg:w="10782962"/><text x="86.4059%" y="415.50">brad_sol..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2,082,203 samples, 1.25%)</title><rect x="91.3618%" y="389" width="1.2458%" height="15" fill="rgb(249,139,47)" fg:x="152695309" fg:w="2082203"/><text x="91.6118%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2,082,203 samples, 1.25%)</title><rect x="91.3618%" y="373" width="1.2458%" height="15" fill="rgb(244,64,35)" fg:x="152695309" fg:w="2082203"/><text x="91.6118%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,082,203 samples, 1.25%)</title><rect x="91.3618%" y="357" width="1.2458%" height="15" fill="rgb(216,46,15)" fg:x="152695309" fg:w="2082203"/><text x="91.6118%" y="367.50"></text></g><g><title>brad_solve::ty::Conjunct::inter (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="485" width="1.3300%" height="15" fill="rgb(250,74,19)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="495.50"></text></g><g><title>brad_solve::ty::Term::inter_negative (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="469" width="1.3300%" height="15" fill="rgb(249,42,33)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="479.50"></text></g><g><title>brad_solve::ty::tag::Tags::union (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="453" width="1.3300%" height="15" fill="rgb(242,149,17)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="437" width="1.3300%" height="15" fill="rgb(244,29,21)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="447.50"></text></g><g><title>core::slice::sort::unstable::sort (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="421" width="1.3300%" height="15" fill="rgb(220,130,37)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="431.50"></text></g><g><title>core::slice::sort::unstable::ipnsort (2,222,939 samples, 1.33%)</title><rect x="92.6077%" y="405" width="1.3300%" height="15" fill="rgb(211,67,2)" fg:x="154777512" fg:w="2222939"/><text x="92.8577%" y="415.50"></text></g><g><title>brad::main (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="789" width="40.0772%" height="15" fill="rgb(235,68,52)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="799.50">brad::main</text></g><g><title>brad::main2 (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="773" width="40.0772%" height="15" fill="rgb(246,142,3)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="783.50">brad::main2</text></g><g><title>brad::compiler::Compiler::lua (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="757" width="40.0772%" height="15" fill="rgb(241,25,7)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="767.50">brad::compiler::Compiler::lua</text></g><g><title>brad::compiler::Compiler::lower2 (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="741" width="40.0772%" height="15" fill="rgb(242,119,39)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="751.50">brad::compiler::Compiler::lower2</text></g><g><title>brad::lower2::Lowerer::finish (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="725" width="40.0772%" height="15" fill="rgb(241,98,45)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="735.50">brad::lower2::Lowerer::finish</text></g><g><title>brad::lower2::Lowerer::lower_functions (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="709" width="40.0772%" height="15" fill="rgb(254,28,30)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="719.50">brad::lower2::Lowerer::lower_functions</text></g><g><title>brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="693" width="40.0772%" height="15" fill="rgb(241,142,54)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="703.50">brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="677" width="40.0772%" height="15" fill="rgb(222,85,15)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="687.50">brad::lower2::expr::ExprLowerer::expr</text></g><g><title>brad::lower2::expr::ExprLowerer::block_expr (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="661" width="40.0772%" height="15" fill="rgb(210,85,47)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="671.50">brad::lower2::expr::ExprLowerer::block_expr</text></g><g><title>brad::lower2::expr::ExprLowerer::expr (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="645" width="40.0772%" height="15" fill="rgb(224,206,25)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="655.50">brad::lower2::expr::ExprLowerer::expr</text></g><g><title>brad::lower2::expr::ExprLowerer::let_expr (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="629" width="40.0772%" height="15" fill="rgb(243,201,19)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="639.50">brad::lower2::expr::ExprLowerer::let_expr</text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="613" width="40.0772%" height="15" fill="rgb(236,59,4)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="623.50">brad::lower2::expr::ExprLowerer::subtype</text></g><g><title>brad_solve::tcx::Tcx::subtype (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="597" width="40.0772%" height="15" fill="rgb(254,179,45)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="607.50">brad_solve::tcx::Tcx::subtype</text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="581" width="40.0772%" height="15" fill="rgb(226,14,10)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="591.50">brad_solve::tcx::Tcx::subtype_normal_form</text></g><g><title>brad_solve::tcx::Tcx::constrain (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="565" width="40.0772%" height="15" fill="rgb(244,27,41)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="575.50">brad_solve::tcx::Tcx::constrain</text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="549" width="40.0772%" height="15" fill="rgb(235,35,32)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="559.50">brad_solve::tcx::Tcx::constrain_conjunct</text></g><g><title>brad_solve::tcx::Tcx::constrain_apps (66,981,959 samples, 40.08%)</title><rect x="55.1646%" y="533" width="40.0772%" height="15" fill="rgb(218,68,31)" fg:x="92197909" fg:w="66981959"/><text x="55.4146%" y="543.50">brad_solve::tcx::Tcx::constrain_apps</text></g><g><title>brad_solve::tcx::Tcx::make_normal_form (4,402,356 samples, 2.63%)</title><rect x="92.6077%" y="517" width="2.6341%" height="15" fill="rgb(207,120,37)" fg:x="154777512" fg:w="4402356"/><text x="92.8577%" y="527.50">br..</text></g><g><title>brad_solve::ty::Type::inter (4,402,356 samples, 2.63%)</title><rect x="92.6077%" y="501" width="2.6341%" height="15" fill="rgb(227,98,0)" fg:x="154777512" fg:w="4402356"/><text x="92.8577%" y="511.50">br..</text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Conjunct&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="485" width="1.3040%" height="15" fill="rgb(207,7,3)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::Term&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="469" width="1.3040%" height="15" fill="rgb(206,98,19)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::app::App&gt;&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="453" width="1.3040%" height="15" fill="rgb(217,5,26)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="437" width="1.3040%" height="15" fill="rgb(235,190,38)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[brad_solve::ty::app::App]&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="421" width="1.3040%" height="15" fill="rgb(247,86,24)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;brad_solve::ty::app::App&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="405" width="1.3040%" height="15" fill="rgb(205,101,16)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[brad_solve::ty::Type]&gt;&gt; (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="389" width="1.3040%" height="15" fill="rgb(246,168,33)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="373" width="1.3040%" height="15" fill="rgb(231,114,1)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="357" width="1.3040%" height="15" fill="rgb(207,184,53)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (2,179,417 samples, 1.30%)</title><rect x="93.9377%" y="341" width="1.3040%" height="15" fill="rgb(224,95,51)" fg:x="157000451" fg:w="2179417"/><text x="94.1877%" y="351.50"></text></g><g><title>main (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="789" width="1.3292%" height="15" fill="rgb(212,188,45)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="799.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="773" width="1.3292%" height="15" fill="rgb(223,154,38)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="783.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="757" width="1.3292%" height="15" fill="rgb(251,22,52)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="767.50"></text></g><g><title>brad::main (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="741" width="1.3292%" height="15" fill="rgb(229,209,22)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="751.50"></text></g><g><title>brad::main2 (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="725" width="1.3292%" height="15" fill="rgb(234,138,34)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="735.50"></text></g><g><title>brad::compiler::Compiler::lua (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="709" width="1.3292%" height="15" fill="rgb(212,95,11)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="719.50"></text></g><g><title>brad::compiler::Compiler::lower2 (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="693" width="1.3292%" height="15" fill="rgb(240,179,47)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="703.50"></text></g><g><title>brad::lower2::Lowerer::finish (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="677" width="1.3292%" height="15" fill="rgb(240,163,11)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="687.50"></text></g><g><title>brad::lower2::Lowerer::lower_functions (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="661" width="1.3292%" height="15" fill="rgb(236,37,12)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="671.50"></text></g><g><title>brad::lower2::expr::&lt;impl brad::lower2::Lowerer&gt;::lower_function (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="645" width="1.3292%" height="15" fill="rgb(232,164,16)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="655.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::expr (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="629" width="1.3292%" height="15" fill="rgb(244,205,15)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="639.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::block_expr (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="613" width="1.3292%" height="15" fill="rgb(223,117,47)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="623.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::expr (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="597" width="1.3292%" height="15" fill="rgb(244,107,35)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="607.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::let_expr (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="581" width="1.3292%" height="15" fill="rgb(205,140,8)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="591.50"></text></g><g><title>brad::lower2::expr::ExprLowerer::subtype (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="565" width="1.3292%" height="15" fill="rgb(228,84,46)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="575.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="549" width="1.3292%" height="15" fill="rgb(254,188,9)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="559.50"></text></g><g><title>brad_solve::tcx::Tcx::subtype_normal_form (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="533" width="1.3292%" height="15" fill="rgb(206,112,54)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="543.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="517" width="1.3292%" height="15" fill="rgb(216,84,49)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="527.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_conjunct (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="501" width="1.3292%" height="15" fill="rgb(214,194,35)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="511.50"></text></g><g><title>brad_solve::tcx::Tcx::constrain_apps (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="485" width="1.3292%" height="15" fill="rgb(249,28,3)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="495.50"></text></g><g><title>brad_solve::tcx::Tcx::expand_application (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="469" width="1.3292%" height="15" fill="rgb(222,56,52)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="479.50"></text></g><g><title>brad_solve::tcx::Tcx::expand_impl (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="453" width="1.3292%" height="15" fill="rgb(245,217,50)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="437" width="1.3292%" height="15" fill="rgb(213,201,24)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;brad_solve::ty::Conjunct&gt;&gt; (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="421" width="1.3292%" height="15" fill="rgb(248,116,28)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;brad_solve::ty::Conjunct&gt;&gt; (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="405" width="1.3292%" height="15" fill="rgb(219,72,43)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="389" width="1.3292%" height="15" fill="rgb(209,138,14)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="373" width="1.3292%" height="15" fill="rgb(222,18,33)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="357" width="1.3292%" height="15" fill="rgb(213,199,7)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="341" width="1.3292%" height="15" fill="rgb(250,110,10)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="351.50"></text></g><g><title>__rdl_dealloc (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="325" width="1.3292%" height="15" fill="rgb(248,123,6)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="309" width="1.3292%" height="15" fill="rgb(206,91,31)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="319.50"></text></g><g><title>_int_free (2,221,528 samples, 1.33%)</title><rect x="95.2417%" y="293" width="1.3292%" height="15" fill="rgb(211,154,13)" fg:x="159179868" fg:w="2221528"/><text x="95.4917%" y="303.50"></text></g><g><title>brad (163,641,252 samples, 97.91%)</title><rect x="0.0000%" y="805" width="97.9111%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="163641252"/><text x="0.2500%" y="815.50">brad</text></g><g><title>malloc (2,239,856 samples, 1.34%)</title><rect x="96.5709%" y="789" width="1.3402%" height="15" fill="rgb(220,160,43)" fg:x="161401396" fg:w="2239856"/><text x="96.8209%" y="799.50"></text></g><g><title>[anon] (805,683 samples, 0.48%)</title><rect x="97.9111%" y="789" width="0.4821%" height="15" fill="rgb(213,52,39)" fg:x="163641252" fg:w="805683"/><text x="98.1611%" y="799.50"></text></g><g><title>luaH_get (805,683 samples, 0.48%)</title><rect x="97.9111%" y="773" width="0.4821%" height="15" fill="rgb(243,137,7)" fg:x="163641252" fg:w="805683"/><text x="98.1611%" y="783.50"></text></g><g><title>[libncursesw.so.6.5] (451,198 samples, 0.27%)</title><rect x="98.3931%" y="789" width="0.2700%" height="15" fill="rgb(230,79,13)" fg:x="164446935" fg:w="451198"/><text x="98.6431%" y="799.50"></text></g><g><title>_dl_lookup_symbol_x (451,198 samples, 0.27%)</title><rect x="98.3931%" y="773" width="0.2700%" height="15" fill="rgb(247,105,23)" fg:x="164446935" fg:w="451198"/><text x="98.6431%" y="783.50"></text></g><g><title>body (677,727 samples, 0.41%)</title><rect x="98.6631%" y="533" width="0.4055%" height="15" fill="rgb(223,179,41)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="543.50"></text></g><g><title>statement (677,727 samples, 0.41%)</title><rect x="98.6631%" y="517" width="0.4055%" height="15" fill="rgb(218,9,34)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="527.50"></text></g><g><title>test_then_block (677,727 samples, 0.41%)</title><rect x="98.6631%" y="501" width="0.4055%" height="15" fill="rgb(222,106,8)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="511.50"></text></g><g><title>statement (677,727 samples, 0.41%)</title><rect x="98.6631%" y="485" width="0.4055%" height="15" fill="rgb(211,220,0)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="495.50"></text></g><g><title>subexpr (677,727 samples, 0.41%)</title><rect x="98.6631%" y="469" width="0.4055%" height="15" fill="rgb(229,52,16)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="479.50"></text></g><g><title>constructor (677,727 samples, 0.41%)</title><rect x="98.6631%" y="453" width="0.4055%" height="15" fill="rgb(212,155,18)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="463.50"></text></g><g><title>luaX_next (677,727 samples, 0.41%)</title><rect x="98.6631%" y="437" width="0.4055%" height="15" fill="rgb(242,21,14)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="447.50"></text></g><g><title>llex (677,727 samples, 0.41%)</title><rect x="98.6631%" y="421" width="0.4055%" height="15" fill="rgb(222,19,48)" fg:x="164898133" fg:w="677727"/><text x="98.9131%" y="431.50"></text></g><g><title>__libc_start_call_main (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="789" width="1.0669%" height="15" fill="rgb(232,45,27)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="799.50"></text></g><g><title>main (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="773" width="1.0669%" height="15" fill="rgb(249,103,42)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="783.50"></text></g><g><title>lua_pcallk (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="757" width="1.0669%" height="15" fill="rgb(246,81,33)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="767.50"></text></g><g><title>luaD_pcall (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="741" width="1.0669%" height="15" fill="rgb(252,33,42)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="751.50"></text></g><g><title>luaD_rawrunprotected (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="725" width="1.0669%" height="15" fill="rgb(209,212,41)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="735.50"></text></g><g><title>luaD_call (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="709" width="1.0669%" height="15" fill="rgb(207,154,6)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="719.50"></text></g><g><title>luaD_precall (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="693" width="1.0669%" height="15" fill="rgb(223,64,47)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="703.50"></text></g><g><title>pmain (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="677" width="1.0669%" height="15" fill="rgb(211,161,38)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="687.50"></text></g><g><title>luaL_loadfilex (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="661" width="1.0669%" height="15" fill="rgb(219,138,40)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="671.50"></text></g><g><title>lua_load (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="645" width="1.0669%" height="15" fill="rgb(241,228,46)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="655.50"></text></g><g><title>luaD_protectedparser (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="629" width="1.0669%" height="15" fill="rgb(223,209,38)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="639.50"></text></g><g><title>luaD_pcall (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="613" width="1.0669%" height="15" fill="rgb(236,164,45)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="623.50"></text></g><g><title>luaD_rawrunprotected (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="597" width="1.0669%" height="15" fill="rgb(231,15,5)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="607.50"></text></g><g><title>f_parser (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="581" width="1.0669%" height="15" fill="rgb(252,35,15)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="591.50"></text></g><g><title>luaY_parser (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="565" width="1.0669%" height="15" fill="rgb(248,181,18)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="575.50"></text></g><g><title>statement (1,783,195 samples, 1.07%)</title><rect x="98.6631%" y="549" width="1.0669%" height="15" fill="rgb(233,39,42)" fg:x="164898133" fg:w="1783195"/><text x="98.9131%" y="559.50"></text></g><g><title>suffixedexp (1,105,468 samples, 0.66%)</title><rect x="99.0686%" y="533" width="0.6614%" height="15" fill="rgb(238,110,33)" fg:x="165575860" fg:w="1105468"/><text x="99.3186%" y="543.50"></text></g><g><title>luaX_next (1,105,468 samples, 0.66%)</title><rect x="99.0686%" y="517" width="0.6614%" height="15" fill="rgb(233,195,10)" fg:x="165575860" fg:w="1105468"/><text x="99.3186%" y="527.50"></text></g><g><title>llex (1,105,468 samples, 0.66%)</title><rect x="99.0686%" y="501" width="0.6614%" height="15" fill="rgb(254,105,3)" fg:x="165575860" fg:w="1105468"/><text x="99.3186%" y="511.50"></text></g><g><title>luaX_newstring (1,105,468 samples, 0.66%)</title><rect x="99.0686%" y="485" width="0.6614%" height="15" fill="rgb(221,225,9)" fg:x="165575860" fg:w="1105468"/><text x="99.3186%" y="495.50"></text></g><g><title>luaS_newlstr (1,105,468 samples, 0.66%)</title><rect x="99.0686%" y="469" width="0.6614%" height="15" fill="rgb(224,227,45)" fg:x="165575860" fg:w="1105468"/><text x="99.3186%" y="479.50"></text></g><g><title>all (167,132,526 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(229,198,43)" fg:x="0" fg:w="167132526"/><text x="0.2500%" y="831.50"></text></g><g><title>lua (3,491,274 samples, 2.09%)</title><rect x="97.9111%" y="805" width="2.0889%" height="15" fill="rgb(206,209,35)" fg:x="163641252" fg:w="3491274"/><text x="98.1611%" y="815.50">l..</text></g><g><title>do_lookup_x (451,198 samples, 0.27%)</title><rect x="99.7300%" y="789" width="0.2700%" height="15" fill="rgb(245,195,53)" fg:x="166681328" fg:w="451198"/><text x="99.9800%" y="799.50"></text></g></svg></svg>