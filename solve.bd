type list<'a> = none | 'a * list<'a>

fn one x {
  list <| x, list none
}

fn prepend x xs {
  list <| x, xs
}

fn map f xs {
  match xs
  | none            => list none
  | _ as head, tail => list <| f head, map f tail
}

fn mul x y {
  x * y
}

fn main {
  one 1
  |> prepend 2
  |> prepend 3
  |> map (mul 2)
}
