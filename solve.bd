type list<'a> = none | { head: 'a; tail: list<'a> }

fn one x {
  list { head: x; tail: list none }
}

fn prepend x xs {
  list { head: x; tail: xs }
}

fn map f xs {
  match xs
  | none => list none
  | list as c => {
    list {
      head: f c.head
      tail: map f c.tail
    }
  }
}

fn mul x y {
  x * y
}

fn main {
  one 1
  |> prepend 2
  |> prepend 3
  |> map (mul 2)
}
