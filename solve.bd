type list<'a> = none | 'a * list<'a>

fn list::one x {
  list <| x, list none
}

fn list::prepend x xs {
  list <| x, xs
}

fn list::map f xs {
  match xs
  | none            => list none
  | _ as head, tail => list <| f head, list::map f tail
}

fn mul x y {
  x * y
}

fn main {
  list::one 1
  |> list::prepend 2
  |> list::prepend 3
  |> list::map (mul 2)
}
