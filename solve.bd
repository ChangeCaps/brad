type list<'a> = none | 'a * list<'a>
type map<'a, 'b> = list<'a * 'b>
type some<'a> = 'a

fn list::empty {
  list none
}

fn list::prepend x xs {
  list <| x, xs
}

fn list::one x {
  list::prepend x list::empty
}

fn list::map f xs -> list {
  match xs
  | none       => list none
  | _ as x, xs => list <| f x, list::map f xs
}

fn map::empty {
  map list::empty
}

fn map::with k v m {
  map (list::prepend <| k, v <| m)
}

fn map::get (k: 'k) (m: map<'k, 'v>) {
  match m
  | none            => none
  | _ as (k', v), m => {
    match k == k'
    | true  => some v
    | false => map::get k (map m)
  }
}

fn mul x y {
  x * y
}

fn main {
  //list::empty
  //|> list::prepend 1
  //|> list::prepend 2
  //|> list::prepend 3
  //|> list::map (mul 2)

  //let b = map::empty
  //|> map::with "a" 1
  //|> map::with "b" 2
  //|> map::with "c" 3
  //|> map::get "b" 
}
