Compiling function: print::main
Compiling function: std::io::println
Compiling function: std::io::print
Compiling function: std::string::append
Compiling function: std::string::concat
Verifying module...
; ModuleID = 'main'
source_filename = "main"

@string_bytes = global [2 x i8] c" \00"
@string_bytes.1 = global [6 x i8] c"Hello\00"
@string_bytes.2 = global [2 x i8] c"\0A\00"

declare ptr @brad_alloc(i64, ptr)

declare void @brad_retain(ptr)

declare void @brad_release(ptr)

declare void @brad_collect()

define {} @"print::main"(ptr %0) {
entry:
  %local = alloca ptr, align 8
  %local1 = alloca ptr, align 8
  %local2 = alloca ptr, align 8
  %local3 = alloca ptr, align 8
  %alloc = call ptr @brad_alloc(i64 ptrtoint (ptr getelementptr ({ ptr, i64, { ptr } }, ptr null, i32 1) to i64), ptr @str_marker)
  %function_ptr = getelementptr inbounds { ptr, i64, { ptr } }, ptr %alloc, i32 0, i32 0
  store ptr @"std::io::println", ptr %function_ptr, align 8
  %missing_ptr = getelementptr inbounds { ptr, i64, { ptr } }, ptr %alloc, i32 0, i32 1
  store i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptr %missing_ptr, align 4
  store ptr %alloc, ptr %local, align 8
  %alloc4 = call ptr @brad_alloc(i64 ptrtoint (ptr getelementptr ({ ptr, i64, { ptr, ptr } }, ptr null, i32 1) to i64), ptr @str_marker)
  %function_ptr5 = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc4, i32 0, i32 0
  store ptr @"std::string::append", ptr %function_ptr5, align 8
  %missing_ptr6 = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc4, i32 0, i32 1
  store i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64), ptr %missing_ptr6, align 4
  store ptr %alloc4, ptr %local3, align 8
  %func = load ptr, ptr %local3, align 8
  %alloc7 = call ptr @brad_alloc(i64 add (i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), i64 1), ptr @str_marker)
  store i64 1, ptr %alloc7, align 4
  %str_ptr = getelementptr i8, ptr %alloc7, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str_ptr, ptr align 1 @string_bytes, i64 1, i1 false)
  %func_captures_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 2
  %func_missing_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 1
  %func_missing = load i64, ptr %func_missing_ptr, align 4
  %new_missing = sub i64 %func_missing, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location = getelementptr i8, ptr %func_captures_ptr, i64 %new_missing
  store ptr %alloc7, ptr %input_location, align 8
  store i64 %new_missing, ptr %func_missing_ptr, align 4
  %cmp = icmp eq i64 %new_missing, 0
  %call_output = alloca ptr, align 8
  br i1 %cmp, label %call, label %append

call:                                             ; preds = %entry
  %func_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 0
  %load = load ptr, ptr %func_ptr, align 8
  %call8 = call ptr %load(ptr %func_captures_ptr)
  store ptr %call8, ptr %call_output, align 8
  br label %end

append:                                           ; preds = %entry
  store ptr %func, ptr %call_output, align 8
  br label %end

end:                                              ; preds = %append, %call
  %load9 = load ptr, ptr %call_output, align 8
  store ptr %load9, ptr %local2, align 8
  %func10 = load ptr, ptr %local2, align 8
  %alloc11 = call ptr @brad_alloc(i64 add (i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), i64 5), ptr @str_marker)
  store i64 5, ptr %alloc11, align 4
  %str_ptr12 = getelementptr i8, ptr %alloc11, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str_ptr12, ptr align 1 @string_bytes.1, i64 5, i1 false)
  %func_captures_ptr13 = getelementptr inbounds { ptr, i64, {} }, ptr %func10, i32 0, i32 2
  %func_missing_ptr14 = getelementptr inbounds { ptr, i64, {} }, ptr %func10, i32 0, i32 1
  %func_missing15 = load i64, ptr %func_missing_ptr14, align 4
  %new_missing16 = sub i64 %func_missing15, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location17 = getelementptr i8, ptr %func_captures_ptr13, i64 %new_missing16
  store ptr %alloc11, ptr %input_location17, align 8
  store i64 %new_missing16, ptr %func_missing_ptr14, align 4
  %cmp21 = icmp eq i64 %new_missing16, 0
  %call_output22 = alloca ptr, align 8
  br i1 %cmp21, label %call18, label %append19

call18:                                           ; preds = %end
  %func_ptr23 = getelementptr inbounds { ptr, i64, {} }, ptr %func10, i32 0, i32 0
  %load24 = load ptr, ptr %func_ptr23, align 8
  %call25 = call ptr %load24(ptr %func_captures_ptr13)
  store ptr %call25, ptr %call_output22, align 8
  br label %end20

append19:                                         ; preds = %end
  store ptr %func10, ptr %call_output22, align 8
  br label %end20

end20:                                            ; preds = %append19, %call18
  %load26 = load ptr, ptr %call_output22, align 8
  store ptr %load26, ptr %local1, align 8
  %func27 = load ptr, ptr %local, align 8
  %load28 = load ptr, ptr %local1, align 8
  %func_captures_ptr29 = getelementptr inbounds { ptr, i64, {} }, ptr %func27, i32 0, i32 2
  %func_missing_ptr30 = getelementptr inbounds { ptr, i64, {} }, ptr %func27, i32 0, i32 1
  %func_missing31 = load i64, ptr %func_missing_ptr30, align 4
  %new_missing32 = sub i64 %func_missing31, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location33 = getelementptr i8, ptr %func_captures_ptr29, i64 %new_missing32
  store ptr %load28, ptr %input_location33, align 8
  store i64 %new_missing32, ptr %func_missing_ptr30, align 4
  %cmp37 = icmp eq i64 %new_missing32, 0
  %call_output38 = alloca {}, align 8
  br i1 %cmp37, label %call34, label %append35

call34:                                           ; preds = %end20
  %func_ptr39 = getelementptr inbounds { ptr, i64, {} }, ptr %func27, i32 0, i32 0
  %load40 = load ptr, ptr %func_ptr39, align 8
  %call41 = call {} %load40(ptr %func_captures_ptr29)
  store {} %call41, ptr %call_output38, align 1
  br label %end36

append35:                                         ; preds = %end20
  store ptr %func27, ptr %call_output38, align 8
  br label %end36

end36:                                            ; preds = %append35, %call34
  %load42 = load {}, ptr %call_output38, align 1
  ret {} %load42
}

define {} @"std::io::println"(ptr %0) {
entry:
  %local = alloca ptr, align 8
  %local1 = alloca ptr, align 8
  %local2 = alloca ptr, align 8
  %local3 = alloca ptr, align 8
  %local4 = alloca ptr, align 8
  %local5 = alloca ptr, align 8
  %arg = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %load = load ptr, ptr %arg, align 8
  store ptr %load, ptr %local, align 8
  %load6 = load ptr, ptr %local, align 8
  store ptr %load6, ptr %local1, align 8
  %alloc = call ptr @brad_alloc(i64 ptrtoint (ptr getelementptr ({ ptr, i64, { ptr } }, ptr null, i32 1) to i64), ptr @str_marker)
  %function_ptr = getelementptr inbounds { ptr, i64, { ptr } }, ptr %alloc, i32 0, i32 0
  store ptr @"std::io::print", ptr %function_ptr, align 8
  %missing_ptr = getelementptr inbounds { ptr, i64, { ptr } }, ptr %alloc, i32 0, i32 1
  store i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptr %missing_ptr, align 4
  store ptr %alloc, ptr %local2, align 8
  %alloc7 = call ptr @brad_alloc(i64 ptrtoint (ptr getelementptr ({ ptr, i64, { ptr, ptr } }, ptr null, i32 1) to i64), ptr @str_marker)
  %function_ptr8 = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc7, i32 0, i32 0
  store ptr @"std::string::append", ptr %function_ptr8, align 8
  %missing_ptr9 = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc7, i32 0, i32 1
  store i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64), ptr %missing_ptr9, align 4
  store ptr %alloc7, ptr %local5, align 8
  %func = load ptr, ptr %local5, align 8
  %alloc10 = call ptr @brad_alloc(i64 add (i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), i64 1), ptr @str_marker)
  store i64 1, ptr %alloc10, align 4
  %str_ptr = getelementptr i8, ptr %alloc10, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str_ptr, ptr align 1 @string_bytes.2, i64 1, i1 false)
  %func_captures_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 2
  %func_missing_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 1
  %func_missing = load i64, ptr %func_missing_ptr, align 4
  %new_missing = sub i64 %func_missing, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location = getelementptr i8, ptr %func_captures_ptr, i64 %new_missing
  store ptr %alloc10, ptr %input_location, align 8
  store i64 %new_missing, ptr %func_missing_ptr, align 4
  %cmp = icmp eq i64 %new_missing, 0
  %call_output = alloca ptr, align 8
  br i1 %cmp, label %call, label %append

call:                                             ; preds = %entry
  %func_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 0
  %load11 = load ptr, ptr %func_ptr, align 8
  %call12 = call ptr %load11(ptr %func_captures_ptr)
  store ptr %call12, ptr %call_output, align 8
  br label %end

append:                                           ; preds = %entry
  store ptr %func, ptr %call_output, align 8
  br label %end

end:                                              ; preds = %append, %call
  %load13 = load ptr, ptr %call_output, align 8
  store ptr %load13, ptr %local4, align 8
  %func14 = load ptr, ptr %local4, align 8
  %load15 = load ptr, ptr %local1, align 8
  %func_captures_ptr16 = getelementptr inbounds { ptr, i64, {} }, ptr %func14, i32 0, i32 2
  %func_missing_ptr17 = getelementptr inbounds { ptr, i64, {} }, ptr %func14, i32 0, i32 1
  %func_missing18 = load i64, ptr %func_missing_ptr17, align 4
  %new_missing19 = sub i64 %func_missing18, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location20 = getelementptr i8, ptr %func_captures_ptr16, i64 %new_missing19
  store ptr %load15, ptr %input_location20, align 8
  store i64 %new_missing19, ptr %func_missing_ptr17, align 4
  %cmp24 = icmp eq i64 %new_missing19, 0
  %call_output25 = alloca ptr, align 8
  br i1 %cmp24, label %call21, label %append22

call21:                                           ; preds = %end
  %func_ptr26 = getelementptr inbounds { ptr, i64, {} }, ptr %func14, i32 0, i32 0
  %load27 = load ptr, ptr %func_ptr26, align 8
  %call28 = call ptr %load27(ptr %func_captures_ptr16)
  store ptr %call28, ptr %call_output25, align 8
  br label %end23

append22:                                         ; preds = %end
  store ptr %func14, ptr %call_output25, align 8
  br label %end23

end23:                                            ; preds = %append22, %call21
  %load29 = load ptr, ptr %call_output25, align 8
  store ptr %load29, ptr %local3, align 8
  %load30 = load ptr, ptr %local1, align 8
  call void @brad_release(ptr %load30)
  %func31 = load ptr, ptr %local2, align 8
  %load32 = load ptr, ptr %local3, align 8
  %func_captures_ptr33 = getelementptr inbounds { ptr, i64, {} }, ptr %func31, i32 0, i32 2
  %func_missing_ptr34 = getelementptr inbounds { ptr, i64, {} }, ptr %func31, i32 0, i32 1
  %func_missing35 = load i64, ptr %func_missing_ptr34, align 4
  %new_missing36 = sub i64 %func_missing35, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location37 = getelementptr i8, ptr %func_captures_ptr33, i64 %new_missing36
  store ptr %load32, ptr %input_location37, align 8
  store i64 %new_missing36, ptr %func_missing_ptr34, align 4
  %cmp41 = icmp eq i64 %new_missing36, 0
  %call_output42 = alloca {}, align 8
  br i1 %cmp41, label %call38, label %append39

call38:                                           ; preds = %end23
  %func_ptr43 = getelementptr inbounds { ptr, i64, {} }, ptr %func31, i32 0, i32 0
  %load44 = load ptr, ptr %func_ptr43, align 8
  %call45 = call {} %load44(ptr %func_captures_ptr33)
  store {} %call45, ptr %call_output42, align 1
  br label %end40

append39:                                         ; preds = %end23
  store ptr %func31, ptr %call_output42, align 8
  br label %end40

end40:                                            ; preds = %append39, %call38
  %load46 = load {}, ptr %call_output42, align 1
  ret {} %load46
}

define {} @"std::io::print"(ptr %0) {
entry:
  %local = alloca ptr, align 8
  %local1 = alloca ptr, align 8
  %arg = getelementptr inbounds { ptr }, ptr %0, i32 0, i32 0
  %load = load ptr, ptr %arg, align 8
  store ptr %load, ptr %local, align 8
  %load_extern_call = load ptr, ptr %local, align 8
  %call = call {} @brad_print(ptr %load_extern_call)
  ret {} %call
}

define ptr @"std::string::append"(ptr %0) {
entry:
  %local = alloca ptr, align 8
  %local1 = alloca ptr, align 8
  %local2 = alloca ptr, align 8
  %local3 = alloca ptr, align 8
  %local4 = alloca ptr, align 8
  %local5 = alloca ptr, align 8
  %arg = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %load = load ptr, ptr %arg, align 8
  store ptr %load, ptr %local1, align 8
  %arg6 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %load7 = load ptr, ptr %arg6, align 8
  store ptr %load7, ptr %local, align 8
  %load8 = load ptr, ptr %local, align 8
  store ptr %load8, ptr %local2, align 8
  %load9 = load ptr, ptr %local1, align 8
  store ptr %load9, ptr %local3, align 8
  %alloc = call ptr @brad_alloc(i64 ptrtoint (ptr getelementptr ({ ptr, i64, { ptr, ptr } }, ptr null, i32 1) to i64), ptr @str_marker)
  %function_ptr = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc, i32 0, i32 0
  store ptr @"std::string::concat", ptr %function_ptr, align 8
  %missing_ptr = getelementptr inbounds { ptr, i64, { ptr, ptr } }, ptr %alloc, i32 0, i32 1
  store i64 ptrtoint (ptr getelementptr ({ ptr, ptr }, ptr null, i32 1) to i64), ptr %missing_ptr, align 4
  store ptr %alloc, ptr %local5, align 8
  %func = load ptr, ptr %local5, align 8
  %load10 = load ptr, ptr %local3, align 8
  %func_captures_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 2
  %func_missing_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 1
  %func_missing = load i64, ptr %func_missing_ptr, align 4
  %new_missing = sub i64 %func_missing, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location = getelementptr i8, ptr %func_captures_ptr, i64 %new_missing
  store ptr %load10, ptr %input_location, align 8
  store i64 %new_missing, ptr %func_missing_ptr, align 4
  %cmp = icmp eq i64 %new_missing, 0
  %call_output = alloca ptr, align 8
  br i1 %cmp, label %call, label %append

call:                                             ; preds = %entry
  %func_ptr = getelementptr inbounds { ptr, i64, {} }, ptr %func, i32 0, i32 0
  %load11 = load ptr, ptr %func_ptr, align 8
  %call12 = call ptr %load11(ptr %func_captures_ptr)
  store ptr %call12, ptr %call_output, align 8
  br label %end

append:                                           ; preds = %entry
  store ptr %func, ptr %call_output, align 8
  br label %end

end:                                              ; preds = %append, %call
  %load13 = load ptr, ptr %call_output, align 8
  store ptr %load13, ptr %local4, align 8
  %load14 = load ptr, ptr %local3, align 8
  call void @brad_release(ptr %load14)
  %load15 = load ptr, ptr %local2, align 8
  call void @brad_release(ptr %load15)
  %func16 = load ptr, ptr %local4, align 8
  %load17 = load ptr, ptr %local2, align 8
  %func_captures_ptr18 = getelementptr inbounds { ptr, i64, {} }, ptr %func16, i32 0, i32 2
  %func_missing_ptr19 = getelementptr inbounds { ptr, i64, {} }, ptr %func16, i32 0, i32 1
  %func_missing20 = load i64, ptr %func_missing_ptr19, align 4
  %new_missing21 = sub i64 %func_missing20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %input_location22 = getelementptr i8, ptr %func_captures_ptr18, i64 %new_missing21
  store ptr %load17, ptr %input_location22, align 8
  store i64 %new_missing21, ptr %func_missing_ptr19, align 4
  %cmp26 = icmp eq i64 %new_missing21, 0
  %call_output27 = alloca ptr, align 8
  br i1 %cmp26, label %call23, label %append24

call23:                                           ; preds = %end
  %func_ptr28 = getelementptr inbounds { ptr, i64, {} }, ptr %func16, i32 0, i32 0
  %load29 = load ptr, ptr %func_ptr28, align 8
  %call30 = call ptr %load29(ptr %func_captures_ptr18)
  store ptr %call30, ptr %call_output27, align 8
  br label %end25

append24:                                         ; preds = %end
  store ptr %func16, ptr %call_output27, align 8
  br label %end25

end25:                                            ; preds = %append24, %call23
  %load31 = load ptr, ptr %call_output27, align 8
  ret ptr %load31
}

define ptr @"std::string::concat"(ptr %0) {
entry:
  %local = alloca ptr, align 8
  %local1 = alloca ptr, align 8
  %arg = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 0
  %load = load ptr, ptr %arg, align 8
  store ptr %load, ptr %local1, align 8
  %arg2 = getelementptr inbounds { ptr, ptr }, ptr %0, i32 0, i32 1
  %load3 = load ptr, ptr %arg2, align 8
  store ptr %load3, ptr %local, align 8
  %load_extern_call = load ptr, ptr %local, align 8
  %load_extern_call4 = load ptr, ptr %local1, align 8
  %call = call ptr @brad_str_concat(ptr %load_extern_call, ptr %load_extern_call4)
  ret ptr %call
}

define void @str_marker(ptr %0) {
entry:
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

declare {} @brad_print(ptr)

declare ptr @brad_str_concat(ptr, ptr)

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

Allocated 0x55b8b94a0420, size: 24
Allocated 0x55b8b95907d0, size: 32
Allocated 0x55b8b9460f00, size: 9
Allocated 0x55b8b94907a0, size: 13
Allocated 0x55b8b9559490, size: 32
Releasing 0x55b8b94907a0, ref count: 0
Releasing 0x55b8b9460f00, ref count: 0
Allocated 0x55b8b94fc320, size: 24
Allocated 0x55b8b947a520, size: 32
Allocated 0x55b8b948b160, size: 9
Allocated 0x55b8b94c06c0, size: 32
Releasing 0x55b8b954ef10, ref count: 32
Releasing 0x55b8b948b160, ref count: 0
Releasing 0x55b8b954ef10, ref count: 31
Hello 
